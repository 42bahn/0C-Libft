ft_memset:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_bzero:      [OK] [OK] [OK] [OK] 
ft_memcpy:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [NO CRASH] [NO CRASH] [OK] [OK] 
[no crash]: your memcpy does not segv with NULL on first params
Test code:
	ft_memcpy(((void *)0), "segfaulter tu dois", 17);


[no crash]: your memcpy does not segv with NULL on second params
Test code:
	ft_memcpy("            ", ((void *)0), 17);


ft_memccpy:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memmove:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [NO CRASH] [NO CRASH] [OK] [OK] [OK] 
[no crash]: your memmove does not segfault when null params is sent
Test code:
	char b[0xF0];

	ft_memmove(((void *)0), b, 5);


[no crash]: your memmove does not segfault when null params is sent
Test code:
	char b[0xF0];

	ft_memmove(b, ((void *)0), 5);


ft_memchr:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memcmp:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strlen:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_isalpha:    [OK] 
ft_isdigit:    [OK] 
ft_isalnum:    [OK] 
ft_isascii:    [OK] 
ft_isprint:    [OK] 
ft_toupper:    [OK] 
ft_tolower:    [OK] 
ft_strchr:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strrchr:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strncmp:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strlcpy:    [OK] [OK] [OK] [OK] [OK] [OK] {not protected}
ft_strlcat:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strnstr:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_atoi:       [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_calloc:     [OK] [OK] [OK] [OK] [OK] 
ft_strdup:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_substr:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] {not protected}[OK] 
ft_strjoin:    [OK] [OK] [OK] [OK] [OK] {protected}
ft_strtrim:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] {protected}
ft_split:      [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] {protected}
ft_itoa:       [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strmapi:    [OK] [OK] [OK] [OK] [OK] {protected}
ft_putchar_fd: [OK] [OK] 
ft_putstr_fd:  [OK] [OK] {protected}
ft_putendl_fd: [OK] [OK] {protected}
ft_putnbr_fd:  [OK] [OK] [OK] [OK] [OK] 
ft_lstnew:     [OK] [OK] [OK] [OK] 
ft_lstadd_front: [OK] [OK] [OK] 
ft_lstsize:    [OK] [OK] 
ft_lstlast:    [OK] [OK] 
ft_lstadd_back:[OK] [OK] [OK] 
ft_lstdelone:  [OK] 
ft_lstclear:   [OK] [OK] [OK] 
ft_lstiter:    [OK] {protected}
ft_lstmap:     [OK] {protected}
ft_putchar:    [OK] [FAILED] [KO] 
[fail]: your putchar does not work with all ascii chars
Test code:
	char buff[200];
	char buff2[200];

	fd_to_buffer(1);
	for (int i = 0; i < 128; i++)
	{
		ft_putchar(i);
		buff2[i] = i;
	}
	write(1, "", 1);
	get_fd_buffer(1, buff, 1000);
	for (int i = 0; i < 128; i++)
		if (buff[i] != buff2[i])
		{
			exit(TEST_FAILED);
		}
		exit(TEST_SUCCESS);

Diffs:
     putchar: |	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~|
  ft_putchar: ||

[KO]: your putchar does not work with unicode
Test code:
	char buff[10];
	char buff2[10];
	int len = 0;
	int i = 0;

	while (haiku_0[i++])
	{
		wchar_t c = haiku_0[i];
		putwchart(c, &len, buff2);
		buff2[len] = 0;
		fd_to_buffer(1);
		ft_putchar(c);
		write(1, "", 1);
		get_fd_buffer(1, buff, 10);
		if (strcmp(buff, buff2))
		{
			exit(TEST_KO);
		}
	}
	exit(TEST_SUCCESS);

Diffs:
     putchar: |æ± |
  ft_putchar: |`|

ft_putnbr:     [CRASH] [CRASH] [CRASH] [CRASH] [CRASH] 
[crash]: your putnbr does not work
Test code:
	int i = 0;
	char buff[0xF0];

	fd_to_buffer(1);
	ft_putnbr(i);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (atoi(buff) == i)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your putnbr does not work with int max
Test code:
	int i = 2147483647;
	char buff[0xF0];

	fd_to_buffer(1);
	ft_putnbr(i);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (atoi(buff) == i)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your putnbr does not work with int min
Test code:
	int i = (-2147483647 -1);
	char buff[0xF0];

	fd_to_buffer(1);
	ft_putnbr(i);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (atoi(buff) == i)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your putnbr does not work with random numbers
Test code:
	int nbr;
	char buff[0xF0];

	srand(clock());
	nbr = rand();
	fd_to_buffer(1);
	ft_putnbr(nbr);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (nbr != atoi(buff))
	{
		exit(TEST_FAILED);
	}
	;
	nbr = rand();
	fd_to_buffer(1);
	ft_putnbr(nbr);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (nbr != atoi(buff))
	{
		exit(TEST_FAILED);
	}
	;
	nbr = rand();
	fd_to_buffer(1);
	ft_putnbr(nbr);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (nbr != atoi(buff))
	{
		exit(TEST_FAILED);
	}
	;
	nbr = rand();
	fd_to_buffer(1);
	ft_putnbr(nbr);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (nbr != atoi(buff))
	{
		exit(TEST_FAILED);
	}
	;
	exit(TEST_SUCCESS);


[crash]: your putnbr allocate memory, wtf ???
Test code:
	int i = (-2147483647 -1);
	char buff[0xF0];

	fd_to_buffer(1);
	ft_putnbr(i);
	write(1, "", 1);
	get_fd_buffer(1, buff, 0xF0);
	if (atoi(buff) == i)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


